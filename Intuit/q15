/* Koko Eating Bananas */
/* https://leetcode.com/problems/koko-eating-bananas/ */
class Solution {
public:
    int minEatingSpeed(vector<int>& piles, int h) {
         int n= piles.size();
    int speed = INT_MAX;
    int low =0; int high = *max_element(piles.begin(),piles.end());
    while(low<=high)
    {
        int mid = (low+high)/2;
        
     double hours=0;
        for(int i=0;i<n;i++)
        {
            hours += ceil((1.0*piles[i])/mid);
           // this is most important
        }
        // We are using speed because if we get 2 answers which are satisfying the above condition we have to get the minimum
         if(hours<=h)
            {
                speed = min(mid,speed);
                high = mid-1;
            }
            if(hours>h)
            {
                low = mid+1;
            }
        
       
    }
    
   return speed;
    }
};
