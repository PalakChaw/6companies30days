/* Koko Eating Bananas */
/* https://leetcode.com/problems/koko-eating-bananas/ */
class Solution {
public:
    bool ispossible(vector<int> p, int mid,int h) 
    {
       int count = 0;
        for(int i = 0;i<p.size();i++)
        {
            count += (p[i] / mid);
            if(p[i] % mid != 0) count += 1;
        } 
        return (count <= h);
    }
    int minEatingSpeed(vector<int>& p, int h) {
       int low = 1;
        int high = *max_element(p.begin(),p.end());
        int ans;
        while(low<=high)
        {
            int mid = (low + high)/2;
            if(ispossible(p,mid,h))
            {
                high = mid-1;
                ans = mid;
            }
            else{
                low = mid+1;
            }
        }
        return ans;
    }
};
